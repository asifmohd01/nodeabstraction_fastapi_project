{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asifm\\\\OneDrive\\\\Desktop\\\\React\\\\vector-project\\\\frontend\\\\src\\\\nodes\\\\TextNode.js\",\n  _s = $RefreshSig$();\n// src/nodes/TextNode.js\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport BaseNode from \"./BaseNode\";\nimport { Position, Handle, useReactFlow } from \"reactflow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VAR_RE = /\\{\\{\\s*([A-Za-z_$][A-Za-z0-9_$]*)\\s*\\}\\}/g;\nexport default function TextNode({\n  id,\n  data\n}) {\n  _s();\n  const [value, setValue] = useState((data === null || data === void 0 ? void 0 : data.value) || \"\");\n  const [vars, setVars] = useState([]);\n  const [size, setSize] = useState({\n    w: 260,\n    h: 140\n  });\n  const taRef = useRef(null);\n  const {\n    setNodes\n  } = useReactFlow();\n\n  // detect variables {{var}}\n  useEffect(() => {\n    const found = new Set();\n    let m;\n    while ((m = VAR_RE.exec(value)) !== null) found.add(m[1]);\n    setVars([...found]);\n  }, [value]);\n\n  // autosize textarea & node\n  useEffect(() => {\n    if (!taRef.current) return;\n    const TA = taRef.current;\n    TA.style.height = \"0px\";\n    TA.style.height = TA.scrollHeight + \"px\";\n    const lines = TA.value.split(\"\\n\");\n    const longest = lines.reduce((a, b) => b.length > a ? b.length : a, 0);\n    const w = Math.min(520, Math.max(260, longest * 7 + 40));\n    const h = Math.min(420, Math.max(140, TA.scrollHeight + 80));\n    setSize({\n      w,\n      h\n    });\n  }, [value]);\n\n  // push updates back into node data for edges\n  useEffect(() => {\n    setNodes(nds => nds.map(n => n.id === id ? {\n      ...n,\n      data: {\n        ...n.data,\n        value\n      }\n    } : n));\n  }, [value, id, setNodes]);\n  const inputs = useMemo(() => vars.map(name => ({\n    id: `var:${name}`,\n    label: name\n  })), [vars]);\n  return /*#__PURE__*/_jsxDEV(BaseNode, {\n    id: id,\n    data: {\n      title: \"Text\",\n      subtitle: `${vars.length} var${vars.length === 1 ? \"\" : \"s\"}`,\n      size,\n      inputs: inputs.map(h => ({\n        ...h,\n        type: \"target\",\n        position: Position.Left,\n        style: {\n          background: \"#555\",\n          width: 12,\n          height: 12,\n          borderRadius: \"50%\"\n        }\n      })),\n      outputs: [{\n        id: `${id}-out`,\n        label: \"Output\",\n        type: \"source\",\n        position: Position.Right,\n        style: {\n          background: \"green\",\n          width: 14,\n          height: 14,\n          borderRadius: \"50%\"\n        },\n        value\n      }],\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          ref: taRef,\n          className: \"node-textarea\",\n          placeholder: \"Type here... use {{ variableName }} to create inputs\",\n          value: value,\n          onChange: e => setValue(e.target.value),\n          style: {\n            width: \"100%\",\n            minHeight: 80\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), vars.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: 8,\n            display: \"flex\",\n            gap: 6,\n            flexWrap: \"wrap\"\n          },\n          children: vars.map(v => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"badge\",\n            children: v\n          }, v, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(TextNode, \"MbJ7m/yWZN8cO3v/94g95mHNkCM=\", false, function () {\n  return [useReactFlow];\n});\n_c = TextNode;\nvar _c;\n$RefreshReg$(_c, \"TextNode\");","map":{"version":3,"names":["React","useEffect","useMemo","useRef","useState","BaseNode","Position","Handle","useReactFlow","jsxDEV","_jsxDEV","VAR_RE","TextNode","id","data","_s","value","setValue","vars","setVars","size","setSize","w","h","taRef","setNodes","found","Set","m","exec","add","current","TA","style","height","scrollHeight","lines","split","longest","reduce","a","b","length","Math","min","max","nds","map","n","inputs","name","label","title","subtitle","type","position","Left","background","width","borderRadius","outputs","Right","children","ref","className","placeholder","onChange","e","target","minHeight","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","display","gap","flexWrap","v","_c","$RefreshReg$"],"sources":["C:/Users/asifm/OneDrive/Desktop/React/vector-project/frontend/src/nodes/TextNode.js"],"sourcesContent":["// src/nodes/TextNode.js\r\nimport React, { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport BaseNode from \"./BaseNode\";\r\nimport { Position, Handle, useReactFlow } from \"reactflow\";\r\n\r\nconst VAR_RE = /\\{\\{\\s*([A-Za-z_$][A-Za-z0-9_$]*)\\s*\\}\\}/g;\r\n\r\nexport default function TextNode({ id, data }) {\r\n  const [value, setValue] = useState(data?.value || \"\");\r\n  const [vars, setVars] = useState([]);\r\n  const [size, setSize] = useState({ w: 260, h: 140 });\r\n  const taRef = useRef(null);\r\n  const { setNodes } = useReactFlow();\r\n\r\n  // detect variables {{var}}\r\n  useEffect(() => {\r\n    const found = new Set();\r\n    let m;\r\n    while ((m = VAR_RE.exec(value)) !== null) found.add(m[1]);\r\n    setVars([...found]);\r\n  }, [value]);\r\n\r\n  // autosize textarea & node\r\n  useEffect(() => {\r\n    if (!taRef.current) return;\r\n    const TA = taRef.current;\r\n    TA.style.height = \"0px\";\r\n    TA.style.height = TA.scrollHeight + \"px\";\r\n    const lines = TA.value.split(\"\\n\");\r\n    const longest = lines.reduce((a, b) => (b.length > a ? b.length : a), 0);\r\n    const w = Math.min(520, Math.max(260, longest * 7 + 40));\r\n    const h = Math.min(420, Math.max(140, TA.scrollHeight + 80));\r\n    setSize({ w, h });\r\n  }, [value]);\r\n\r\n  // push updates back into node data for edges\r\n  useEffect(() => {\r\n    setNodes((nds) =>\r\n      nds.map((n) => (n.id === id ? { ...n, data: { ...n.data, value } } : n))\r\n    );\r\n  }, [value, id, setNodes]);\r\n\r\n  const inputs = useMemo(\r\n    () => vars.map((name) => ({ id: `var:${name}`, label: name })),\r\n    [vars]\r\n  );\r\n\r\n  return (\r\n    <BaseNode\r\n      id={id}\r\n      data={{\r\n        title: \"Text\",\r\n        subtitle: `${vars.length} var${vars.length === 1 ? \"\" : \"s\"}`,\r\n        size,\r\n        inputs: inputs.map((h) => ({\r\n          ...h,\r\n          type: \"target\",\r\n          position: Position.Left,\r\n          style: { background: \"#555\", width: 12, height: 12, borderRadius: \"50%\" },\r\n        })),\r\n        outputs: [\r\n          {\r\n            id: `${id}-out`,\r\n            label: \"Output\",\r\n            type: \"source\",\r\n            position: Position.Right,\r\n            style: { background: \"green\", width: 14, height: 14, borderRadius: \"50%\" },\r\n            value,\r\n          },\r\n        ],\r\n        children: (\r\n          <div>\r\n            <textarea\r\n              ref={taRef}\r\n              className=\"node-textarea\"\r\n              placeholder=\"Type here... use {{ variableName }} to create inputs\"\r\n              value={value}\r\n              onChange={(e) => setValue(e.target.value)}\r\n              style={{ width: \"100%\", minHeight: 80 }}\r\n            />\r\n            {vars.length > 0 && (\r\n              <div style={{ marginTop: 8, display: \"flex\", gap: 6, flexWrap: \"wrap\" }}>\r\n                {vars.map((v) => (\r\n                  <span key={v} className=\"badge\">{v}</span>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        ),\r\n      }}\r\n    />\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}