{"ast":null,"code":"// // src/App.js\n// import React, { useCallback, useMemo } from \"react\";\n// import ReactFlow, {\n//   Background,\n//   Controls,\n//   MiniMap,\n//   addEdge,\n//   useEdgesState,\n//   useNodesState,\n//   ConnectionMode,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import \"./index.css\";\n\n// import InputNode from \"./nodes/InputNode\";\n// import OutputNode from \"./nodes/OutputNode\";\n// import LLMNode from \"./nodes/LLMNode\";\n// import TextNode from \"./nodes/TextNode\";\n// import MathNode from \"./nodes/MathNode\";\n// import FilterNode from \"./nodes/FilterNode\";\n// import DelayNode from \"./nodes/DelayNode\";\n// import APINode from \"./nodes/APINode\";\n// import MarkdownNode from \"./nodes/MarkdownNode\";\n\n// import { SubmitButton } from \"./submit\";\n\n// // Initial nodes\n// const initialNodes = [\n//   { id: \"in-1\", type: \"inputNode\", position: { x: 100, y: 100 }, data: {} },\n//   {\n//     id: \"text-1\",\n//     type: \"textNode\",\n//     position: { x: 380, y: 100 },\n//     data: { value: \"Hello {{name}}\" },\n//   },\n//   { id: \"out-1\", type: \"outputNode\", position: { x: 700, y: 100 }, data: {} },\n// ];\n\n// const initialEdges = [];\n\n// // Node types registration\n// const NODE_TYPES = {\n//   inputNode: InputNode,\n//   outputNode: OutputNode,\n//   llmNode: LLMNode,\n//   textNode: TextNode,\n//   mathNode: MathNode,\n//   filterNode: FilterNode,\n//   delayNode: DelayNode,\n//   apiNode: APINode,\n//   markdownNode: MarkdownNode,\n// };\n\n// // Toolbar for adding nodes\n// function Toolbar({ onAdd }) {\n//   const nodeList = [\n//     [\"inputNode\", \"Input\"],\n//     [\"textNode\", \"Text\"],\n//     [\"llmNode\", \"LLM\"],\n//     [\"mathNode\", \"Math\"],\n//     [\"filterNode\", \"Filter\"],\n//     [\"delayNode\", \"Delay\"],\n//     [\"apiNode\", \"API\"],\n//     [\"markdownNode\", \"Markdown\"],\n//     [\"outputNode\", \"Output\"],\n//   ];\n\n//   return (\n//     <div className=\"toolbar\">\n//       <h3>Nodes</h3>\n//       <div className=\"group\">\n//         {nodeList.map(([type, label]) => (\n//           <button key={type} className=\"node-btn\" onClick={() => onAdd(type)}>\n//             {label}\n//           </button>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default function App() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const nodeTypes = useMemo(() => NODE_TYPES, []);\n\n//   // Add edges\n//   const onConnect = useCallback(\n//     (params) =>\n//       setEdges((eds) =>\n//         addEdge(\n//           {\n//             ...params,\n//             type: \"smoothstep\",\n//             animated: true,\n//             style: { stroke: \"#007bff\", strokeWidth: 2 },\n//           },\n//           eds\n//         )\n//       ),\n//     [setEdges]\n//   );\n\n//   // Add new node dynamically\n//   const onAdd = (type) => {\n//     const id = `${type}-${Math.random().toString(36).slice(2, 8)}`;\n//     const x = 100 + Math.random() * 600;\n//     const y = 100 + Math.random() * 400;\n\n//     const newNodeData = { label: type, value: \"\" };\n//     setNodes((nds) =>\n//       nds.concat({ id, type, position: { x, y }, data: newNodeData })\n//     );\n//   };\n\n//   return (\n//     <div className=\"canvas-shell\">\n//       <Toolbar onAdd={onAdd} />\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         connectionMode={ConnectionMode.Loose}\n//         fitView\n//         deleteKeyCode={[\"Backspace\", \"Delete\"]}\n//       >\n//         <MiniMap\n//           nodeStrokeWidth={3}\n//           nodeColor={(node) => {\n//             switch (node.type) {\n//               case \"inputNode\":\n//                 return \"green\";\n//               case \"outputNode\":\n//                 return \"blue\";\n//               case \"llmNode\":\n//                 return \"purple\";\n//               case \"textNode\":\n//                 return \"#f39c12\";\n//               case \"mathNode\":\n//                 return \"#e74c3c\";\n//               default:\n//                 return \"#999\";\n//             }\n//           }}\n//         />\n//         <Controls />\n//         <Background gap={16} color=\"#aaa\" />\n//         <div\n//           style={{ position: \"absolute\", right: 16, bottom: 16, zIndex: 10 }}\n//         >\n//           {/* Pass current nodes & edges to SubmitButton */}\n//           <SubmitButton nodes={nodes} edges={edges} />\n//         </div>\n//       </ReactFlow>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/asifm/OneDrive/Desktop/React/vector-project/frontend/src/App.js"],"sourcesContent":["// // src/App.js\n// import React, { useCallback, useMemo } from \"react\";\n// import ReactFlow, {\n//   Background,\n//   Controls,\n//   MiniMap,\n//   addEdge,\n//   useEdgesState,\n//   useNodesState,\n//   ConnectionMode,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import \"./index.css\";\n\n// import InputNode from \"./nodes/InputNode\";\n// import OutputNode from \"./nodes/OutputNode\";\n// import LLMNode from \"./nodes/LLMNode\";\n// import TextNode from \"./nodes/TextNode\";\n// import MathNode from \"./nodes/MathNode\";\n// import FilterNode from \"./nodes/FilterNode\";\n// import DelayNode from \"./nodes/DelayNode\";\n// import APINode from \"./nodes/APINode\";\n// import MarkdownNode from \"./nodes/MarkdownNode\";\n\n// import { SubmitButton } from \"./submit\";\n\n// // Initial nodes\n// const initialNodes = [\n//   { id: \"in-1\", type: \"inputNode\", position: { x: 100, y: 100 }, data: {} },\n//   {\n//     id: \"text-1\",\n//     type: \"textNode\",\n//     position: { x: 380, y: 100 },\n//     data: { value: \"Hello {{name}}\" },\n//   },\n//   { id: \"out-1\", type: \"outputNode\", position: { x: 700, y: 100 }, data: {} },\n// ];\n\n// const initialEdges = [];\n\n// // Node types registration\n// const NODE_TYPES = {\n//   inputNode: InputNode,\n//   outputNode: OutputNode,\n//   llmNode: LLMNode,\n//   textNode: TextNode,\n//   mathNode: MathNode,\n//   filterNode: FilterNode,\n//   delayNode: DelayNode,\n//   apiNode: APINode,\n//   markdownNode: MarkdownNode,\n// };\n\n// // Toolbar for adding nodes\n// function Toolbar({ onAdd }) {\n//   const nodeList = [\n//     [\"inputNode\", \"Input\"],\n//     [\"textNode\", \"Text\"],\n//     [\"llmNode\", \"LLM\"],\n//     [\"mathNode\", \"Math\"],\n//     [\"filterNode\", \"Filter\"],\n//     [\"delayNode\", \"Delay\"],\n//     [\"apiNode\", \"API\"],\n//     [\"markdownNode\", \"Markdown\"],\n//     [\"outputNode\", \"Output\"],\n//   ];\n\n//   return (\n//     <div className=\"toolbar\">\n//       <h3>Nodes</h3>\n//       <div className=\"group\">\n//         {nodeList.map(([type, label]) => (\n//           <button key={type} className=\"node-btn\" onClick={() => onAdd(type)}>\n//             {label}\n//           </button>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default function App() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const nodeTypes = useMemo(() => NODE_TYPES, []);\n\n//   // Add edges\n//   const onConnect = useCallback(\n//     (params) =>\n//       setEdges((eds) =>\n//         addEdge(\n//           {\n//             ...params,\n//             type: \"smoothstep\",\n//             animated: true,\n//             style: { stroke: \"#007bff\", strokeWidth: 2 },\n//           },\n//           eds\n//         )\n//       ),\n//     [setEdges]\n//   );\n\n//   // Add new node dynamically\n//   const onAdd = (type) => {\n//     const id = `${type}-${Math.random().toString(36).slice(2, 8)}`;\n//     const x = 100 + Math.random() * 600;\n//     const y = 100 + Math.random() * 400;\n\n//     const newNodeData = { label: type, value: \"\" };\n//     setNodes((nds) =>\n//       nds.concat({ id, type, position: { x, y }, data: newNodeData })\n//     );\n//   };\n\n//   return (\n//     <div className=\"canvas-shell\">\n//       <Toolbar onAdd={onAdd} />\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         connectionMode={ConnectionMode.Loose}\n//         fitView\n//         deleteKeyCode={[\"Backspace\", \"Delete\"]}\n//       >\n//         <MiniMap\n//           nodeStrokeWidth={3}\n//           nodeColor={(node) => {\n//             switch (node.type) {\n//               case \"inputNode\":\n//                 return \"green\";\n//               case \"outputNode\":\n//                 return \"blue\";\n//               case \"llmNode\":\n//                 return \"purple\";\n//               case \"textNode\":\n//                 return \"#f39c12\";\n//               case \"mathNode\":\n//                 return \"#e74c3c\";\n//               default:\n//                 return \"#999\";\n//             }\n//           }}\n//         />\n//         <Controls />\n//         <Background gap={16} color=\"#aaa\" />\n//         <div\n//           style={{ position: \"absolute\", right: 16, bottom: 16, zIndex: 10 }}\n//         >\n//           {/* Pass current nodes & edges to SubmitButton */}\n//           <SubmitButton nodes={nodes} edges={edges} />\n//         </div>\n//       </ReactFlow>\n//     </div>\n//   );\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}