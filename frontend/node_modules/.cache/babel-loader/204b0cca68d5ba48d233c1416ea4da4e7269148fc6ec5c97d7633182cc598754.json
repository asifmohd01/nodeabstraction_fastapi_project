{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\asifm\\\\OneDrive\\\\Desktop\\\\React\\\\vector-project\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback } from \"react\";\nimport ReactFlow, { Background, Controls, MiniMap, useNodesState, useEdgesState, addEdge } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport InputNode from \"../components/nodes/InputNode\";\nimport TextNode from \"../components/nodes/TextNode\";\nimport OutputNode from \"../components/nodes/OutputNode\";\nimport LLMNode from \"../components/nodes/LLMNode\";\nimport RAGNode from \"../components/nodes/RAGNode\";\nimport ImageNode from \"../components/nodes/ImageNode\";\nimport APINode from \"../components/nodes/APINode\";\nimport Toolbar from \"../components/Toolbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  input: InputNode,\n  text: TextNode,\n  output: OutputNode,\n  llm: LLMNode,\n  rag: RAGNode,\n  image: ImageNode,\n  api: APINode\n};\nexport default function App() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const onConnect = useCallback(params => setEdges(eds => addEdge({\n    ...params,\n    animated: true\n  }, eds)), []);\n  const addNode = type => {\n    const newNode = {\n      id: `${type}-${nodes.length + 1}`,\n      type,\n      position: {\n        x: Math.random() * 400,\n        y: Math.random() * 400\n      },\n      data: {\n        label: `${type} node`\n      }\n    };\n    setNodes(nds => [...nds, newNode]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-screen h-screen flex\",\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n      addNode: addNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1\",\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        nodeTypes: nodeTypes,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mmoxFmHOvuuD77aIm5gUqDEdUKU=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","React","useCallback","ReactFlow","Background","Controls","MiniMap","useNodesState","useEdgesState","addEdge","InputNode","TextNode","OutputNode","LLMNode","RAGNode","ImageNode","APINode","Toolbar","jsxDEV","_jsxDEV","nodeTypes","input","text","output","llm","rag","image","api","App","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","onConnect","params","eds","animated","addNode","type","newNode","id","length","position","x","Math","random","y","data","label","nds","className","children","fileName","lineNumber","columnNumber","fitView","_c","$RefreshReg$"],"sources":["C:/Users/asifm/OneDrive/Desktop/React/vector-project/frontend/src/App.js"],"sourcesContent":["\"use client\";\n\nimport React, { useCallback } from \"react\";\nimport ReactFlow, {\n  Background,\n  Controls,\n  MiniMap,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n} from \"reactflow\";\n\nimport \"reactflow/dist/style.css\";\n\nimport InputNode from \"../components/nodes/InputNode\";\nimport TextNode from \"../components/nodes/TextNode\";\nimport OutputNode from \"../components/nodes/OutputNode\";\nimport LLMNode from \"../components/nodes/LLMNode\";\nimport RAGNode from \"../components/nodes/RAGNode\";\nimport ImageNode from \"../components/nodes/ImageNode\";\nimport APINode from \"../components/nodes/APINode\";\nimport Toolbar from \"../components/Toolbar\";\n\nconst nodeTypes = {\n  input: InputNode,\n  text: TextNode,\n  output: OutputNode,\n  llm: LLMNode,\n  rag: RAGNode,\n  image: ImageNode,\n  api: APINode,\n};\n\nexport default function App() {\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n\n  const onConnect = useCallback(\n    (params) => setEdges((eds) => addEdge({ ...params, animated: true }, eds)),\n    []\n  );\n\n  const addNode = (type) => {\n    const newNode = {\n      id: `${type}-${nodes.length + 1}`,\n      type,\n      position: { x: Math.random() * 400, y: Math.random() * 400 },\n      data: { label: `${type} node` },\n    };\n    setNodes((nds) => [...nds, newNode]);\n  };\n\n  return (\n    <div className=\"w-screen h-screen flex\">\n      <Toolbar addNode={addNode} />\n      <div className=\"flex-1\">\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnect}\n          nodeTypes={nodeTypes}\n          fitView\n        >\n          <Background />\n          <Controls />\n          <MiniMap />\n        </ReactFlow>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}