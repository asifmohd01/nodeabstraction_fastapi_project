{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asifm\\\\OneDrive\\\\Desktop\\\\React\\\\vector-project\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// // src/App.js\n// import React, { useCallback, useMemo } from \"react\";\n// import ReactFlow, {\n//   Background,\n//   Controls,\n//   MiniMap,\n//   addEdge,\n//   useEdgesState,\n//   useNodesState,\n//   ConnectionMode,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import \"./index.css\";\n\n// import InputNode from \"./nodes/InputNode\";\n// import OutputNode from \"./nodes/OutputNode\";\n// import LLMNode from \"./nodes/LLMNode\";\n// import TextNode from \"./nodes/TextNode\";\n// import MathNode from \"./nodes/MathNode\";\n// import FilterNode from \"./nodes/FilterNode\";\n// import DelayNode from \"./nodes/DelayNode\";\n// import APINode from \"./nodes/APINode\";\n// import MarkdownNode from \"./nodes/MarkdownNode\";\n\n// import { SubmitButton } from \"./submit\";\n\n// // Initial nodes\n// const initialNodes = [\n//   { id: \"in-1\", type: \"inputNode\", position: { x: 100, y: 100 }, data: {} },\n//   {\n//     id: \"text-1\",\n//     type: \"textNode\",\n//     position: { x: 380, y: 100 },\n//     data: { value: \"Hello {{name}}\" },\n//   },\n//   { id: \"out-1\", type: \"outputNode\", position: { x: 700, y: 100 }, data: {} },\n// ];\n\n// const initialEdges = [];\n\n// // Node types registration\n// const NODE_TYPES = {\n//   inputNode: InputNode,\n//   outputNode: OutputNode,\n//   llmNode: LLMNode,\n//   textNode: TextNode,\n//   mathNode: MathNode,\n//   filterNode: FilterNode,\n//   delayNode: DelayNode,\n//   apiNode: APINode,\n//   markdownNode: MarkdownNode,\n// };\n\n// // Toolbar for adding nodes\n// function Toolbar({ onAdd }) {\n//   const nodeList = [\n//     [\"inputNode\", \"Input\"],\n//     [\"textNode\", \"Text\"],\n//     [\"llmNode\", \"LLM\"],\n//     [\"mathNode\", \"Math\"],\n//     [\"filterNode\", \"Filter\"],\n//     [\"delayNode\", \"Delay\"],\n//     [\"apiNode\", \"API\"],\n//     [\"markdownNode\", \"Markdown\"],\n//     [\"outputNode\", \"Output\"],\n//   ];\n\n//   return (\n//     <div className=\"toolbar\">\n//       <h3>Nodes</h3>\n//       <div className=\"group\">\n//         {nodeList.map(([type, label]) => (\n//           <button key={type} className=\"node-btn\" onClick={() => onAdd(type)}>\n//             {label}\n//           </button>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default function App() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const nodeTypes = useMemo(() => NODE_TYPES, []);\n\n//   // Add edges\n//   const onConnect = useCallback(\n//     (params) =>\n//       setEdges((eds) =>\n//         addEdge(\n//           {\n//             ...params,\n//             type: \"smoothstep\",\n//             animated: true,\n//             style: { stroke: \"#007bff\", strokeWidth: 2 },\n//           },\n//           eds\n//         )\n//       ),\n//     [setEdges]\n//   );\n\n//   // Add new node dynamically\n//   const onAdd = (type) => {\n//     const id = `${type}-${Math.random().toString(36).slice(2, 8)}`;\n//     const x = 100 + Math.random() * 600;\n//     const y = 100 + Math.random() * 400;\n\n//     const newNodeData = { label: type, value: \"\" };\n//     setNodes((nds) =>\n//       nds.concat({ id, type, position: { x, y }, data: newNodeData })\n//     );\n//   };\n\n//   return (\n//     <div className=\"canvas-shell\">\n//       <Toolbar onAdd={onAdd} />\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         connectionMode={ConnectionMode.Loose}\n//         fitView\n//         deleteKeyCode={[\"Backspace\", \"Delete\"]}\n//       >\n//         <MiniMap\n//           nodeStrokeWidth={3}\n//           nodeColor={(node) => {\n//             switch (node.type) {\n//               case \"inputNode\":\n//                 return \"green\";\n//               case \"outputNode\":\n//                 return \"blue\";\n//               case \"llmNode\":\n//                 return \"purple\";\n//               case \"textNode\":\n//                 return \"#f39c12\";\n//               case \"mathNode\":\n//                 return \"#e74c3c\";\n//               default:\n//                 return \"#999\";\n//             }\n//           }}\n//         />\n//         <Controls />\n//         <Background gap={16} color=\"#aaa\" />\n//         <div\n//           style={{ position: \"absolute\", right: 16, bottom: 16, zIndex: 10 }}\n//         >\n//           {/* Pass current nodes & edges to SubmitButton */}\n//           <SubmitButton nodes={nodes} edges={edges} />\n//         </div>\n//       </ReactFlow>\n//     </div>\n//   );\n// }\n\n//Another code\n\n// src/submit.js\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SubmitButton = ({\n  nodes = [],\n  edges = []\n}) => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const request = async endpoint => {\n    setLoading(true);\n    try {\n      const resp = await fetch(`http://localhost:8000/pipelines/${endpoint}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          nodes,\n          edges\n        })\n      });\n      if (!resp.ok) {\n        const text = await resp.text();\n        throw new Error(`Server error ${resp.status}: ${text}`);\n      }\n      return await resp.json();\n    } finally {\n      setLoading(false);\n    }\n  };\n  const onValidate = async () => {\n    try {\n      const data = await request(\"parse\");\n      alert(`Pipeline Report\\n\\nNodes: ${data.num_nodes}\\nEdges: ${data.num_edges}\\nDAG: ${data.is_dag ? \"Yes\" : \"No\"}`);\n    } catch (e) {\n      alert(\"Validation failed: \" + e.message);\n    }\n  };\n  const onRun = async () => {\n    try {\n      const data = await request(\"run\");\n      alert(`Pipeline Result:\\n\\n${data.result}`);\n    } catch (e) {\n      alert(\"Run failed: \" + e.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      gap: \"10px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onValidate,\n      disabled: loading,\n      children: loading ? \"Submitting...\" : \"Validate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onRun,\n      disabled: loading,\n      children: loading ? \"Running...\" : \"Run\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n};\n_s(SubmitButton, \"/Rjh5rPqCCqf0XYnTUk9ZNavw3Q=\");\n_c = SubmitButton;\nvar _c;\n$RefreshReg$(_c, \"SubmitButton\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SubmitButton","nodes","edges","_s","loading","setLoading","request","endpoint","resp","fetch","method","headers","body","JSON","stringify","ok","text","Error","status","json","onValidate","data","alert","num_nodes","num_edges","is_dag","e","message","onRun","result","style","display","gap","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/asifm/OneDrive/Desktop/React/vector-project/frontend/src/App.js"],"sourcesContent":["// // src/App.js\n// import React, { useCallback, useMemo } from \"react\";\n// import ReactFlow, {\n//   Background,\n//   Controls,\n//   MiniMap,\n//   addEdge,\n//   useEdgesState,\n//   useNodesState,\n//   ConnectionMode,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import \"./index.css\";\n\n// import InputNode from \"./nodes/InputNode\";\n// import OutputNode from \"./nodes/OutputNode\";\n// import LLMNode from \"./nodes/LLMNode\";\n// import TextNode from \"./nodes/TextNode\";\n// import MathNode from \"./nodes/MathNode\";\n// import FilterNode from \"./nodes/FilterNode\";\n// import DelayNode from \"./nodes/DelayNode\";\n// import APINode from \"./nodes/APINode\";\n// import MarkdownNode from \"./nodes/MarkdownNode\";\n\n// import { SubmitButton } from \"./submit\";\n\n// // Initial nodes\n// const initialNodes = [\n//   { id: \"in-1\", type: \"inputNode\", position: { x: 100, y: 100 }, data: {} },\n//   {\n//     id: \"text-1\",\n//     type: \"textNode\",\n//     position: { x: 380, y: 100 },\n//     data: { value: \"Hello {{name}}\" },\n//   },\n//   { id: \"out-1\", type: \"outputNode\", position: { x: 700, y: 100 }, data: {} },\n// ];\n\n// const initialEdges = [];\n\n// // Node types registration\n// const NODE_TYPES = {\n//   inputNode: InputNode,\n//   outputNode: OutputNode,\n//   llmNode: LLMNode,\n//   textNode: TextNode,\n//   mathNode: MathNode,\n//   filterNode: FilterNode,\n//   delayNode: DelayNode,\n//   apiNode: APINode,\n//   markdownNode: MarkdownNode,\n// };\n\n// // Toolbar for adding nodes\n// function Toolbar({ onAdd }) {\n//   const nodeList = [\n//     [\"inputNode\", \"Input\"],\n//     [\"textNode\", \"Text\"],\n//     [\"llmNode\", \"LLM\"],\n//     [\"mathNode\", \"Math\"],\n//     [\"filterNode\", \"Filter\"],\n//     [\"delayNode\", \"Delay\"],\n//     [\"apiNode\", \"API\"],\n//     [\"markdownNode\", \"Markdown\"],\n//     [\"outputNode\", \"Output\"],\n//   ];\n\n//   return (\n//     <div className=\"toolbar\">\n//       <h3>Nodes</h3>\n//       <div className=\"group\">\n//         {nodeList.map(([type, label]) => (\n//           <button key={type} className=\"node-btn\" onClick={() => onAdd(type)}>\n//             {label}\n//           </button>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default function App() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const nodeTypes = useMemo(() => NODE_TYPES, []);\n\n//   // Add edges\n//   const onConnect = useCallback(\n//     (params) =>\n//       setEdges((eds) =>\n//         addEdge(\n//           {\n//             ...params,\n//             type: \"smoothstep\",\n//             animated: true,\n//             style: { stroke: \"#007bff\", strokeWidth: 2 },\n//           },\n//           eds\n//         )\n//       ),\n//     [setEdges]\n//   );\n\n//   // Add new node dynamically\n//   const onAdd = (type) => {\n//     const id = `${type}-${Math.random().toString(36).slice(2, 8)}`;\n//     const x = 100 + Math.random() * 600;\n//     const y = 100 + Math.random() * 400;\n\n//     const newNodeData = { label: type, value: \"\" };\n//     setNodes((nds) =>\n//       nds.concat({ id, type, position: { x, y }, data: newNodeData })\n//     );\n//   };\n\n//   return (\n//     <div className=\"canvas-shell\">\n//       <Toolbar onAdd={onAdd} />\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         connectionMode={ConnectionMode.Loose}\n//         fitView\n//         deleteKeyCode={[\"Backspace\", \"Delete\"]}\n//       >\n//         <MiniMap\n//           nodeStrokeWidth={3}\n//           nodeColor={(node) => {\n//             switch (node.type) {\n//               case \"inputNode\":\n//                 return \"green\";\n//               case \"outputNode\":\n//                 return \"blue\";\n//               case \"llmNode\":\n//                 return \"purple\";\n//               case \"textNode\":\n//                 return \"#f39c12\";\n//               case \"mathNode\":\n//                 return \"#e74c3c\";\n//               default:\n//                 return \"#999\";\n//             }\n//           }}\n//         />\n//         <Controls />\n//         <Background gap={16} color=\"#aaa\" />\n//         <div\n//           style={{ position: \"absolute\", right: 16, bottom: 16, zIndex: 10 }}\n//         >\n//           {/* Pass current nodes & edges to SubmitButton */}\n//           <SubmitButton nodes={nodes} edges={edges} />\n//         </div>\n//       </ReactFlow>\n//     </div>\n//   );\n// }\n\n//Another code\n\n// src/submit.js\nimport React, { useState } from \"react\";\n\nexport const SubmitButton = ({ nodes = [], edges = [] }) => {\n  const [loading, setLoading] = useState(false);\n\n  const request = async (endpoint) => {\n    setLoading(true);\n    try {\n      const resp = await fetch(`http://localhost:8000/pipelines/${endpoint}`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ nodes, edges }),\n      });\n\n      if (!resp.ok) {\n        const text = await resp.text();\n        throw new Error(`Server error ${resp.status}: ${text}`);\n      }\n\n      return await resp.json();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const onValidate = async () => {\n    try {\n      const data = await request(\"parse\");\n      alert(\n        `Pipeline Report\\n\\nNodes: ${data.num_nodes}\\nEdges: ${\n          data.num_edges\n        }\\nDAG: ${data.is_dag ? \"Yes\" : \"No\"}`\n      );\n    } catch (e) {\n      alert(\"Validation failed: \" + e.message);\n    }\n  };\n\n  const onRun = async () => {\n    try {\n      const data = await request(\"run\");\n      alert(`Pipeline Result:\\n\\n${data.result}`);\n    } catch (e) {\n      alert(\"Run failed: \" + e.message);\n    }\n  };\n\n  return (\n    <div style={{ display: \"flex\", gap: \"10px\" }}>\n      <button onClick={onValidate} disabled={loading}>\n        {loading ? \"Submitting...\" : \"Validate\"}\n      </button>\n      <button onClick={onRun} disabled={loading}>\n        {loading ? \"Running...\" : \"Run\"}\n      </button>\n    </div>\n  );\n};\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC,KAAK,GAAG,EAAE;EAAEC,KAAK,GAAG;AAAG,CAAC,KAAK;EAAAC,EAAA;EAC1D,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMS,OAAO,GAAG,MAAOC,QAAQ,IAAK;IAClCF,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMG,IAAI,GAAG,MAAMC,KAAK,CAAE,mCAAkCF,QAAS,EAAC,EAAE;QACtEG,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEb,KAAK;UAAEC;QAAM,CAAC;MACvC,CAAC,CAAC;MAEF,IAAI,CAACM,IAAI,CAACO,EAAE,EAAE;QACZ,MAAMC,IAAI,GAAG,MAAMR,IAAI,CAACQ,IAAI,CAAC,CAAC;QAC9B,MAAM,IAAIC,KAAK,CAAE,gBAAeT,IAAI,CAACU,MAAO,KAAIF,IAAK,EAAC,CAAC;MACzD;MAEA,OAAO,MAAMR,IAAI,CAACW,IAAI,CAAC,CAAC;IAC1B,CAAC,SAAS;MACRd,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMe,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMf,OAAO,CAAC,OAAO,CAAC;MACnCgB,KAAK,CACF,6BAA4BD,IAAI,CAACE,SAAU,YAC1CF,IAAI,CAACG,SACN,UAASH,IAAI,CAACI,MAAM,GAAG,KAAK,GAAG,IAAK,EACvC,CAAC;IACH,CAAC,CAAC,OAAOC,CAAC,EAAE;MACVJ,KAAK,CAAC,qBAAqB,GAAGI,CAAC,CAACC,OAAO,CAAC;IAC1C;EACF,CAAC;EAED,MAAMC,KAAK,GAAG,MAAAA,CAAA,KAAY;IACxB,IAAI;MACF,MAAMP,IAAI,GAAG,MAAMf,OAAO,CAAC,KAAK,CAAC;MACjCgB,KAAK,CAAE,uBAAsBD,IAAI,CAACQ,MAAO,EAAC,CAAC;IAC7C,CAAC,CAAC,OAAOH,CAAC,EAAE;MACVJ,KAAK,CAAC,cAAc,GAAGI,CAAC,CAACC,OAAO,CAAC;IACnC;EACF,CAAC;EAED,oBACE5B,OAAA;IAAK+B,KAAK,EAAE;MAAEC,OAAO,EAAE,MAAM;MAAEC,GAAG,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC3ClC,OAAA;MAAQmC,OAAO,EAAEd,UAAW;MAACe,QAAQ,EAAE/B,OAAQ;MAAA6B,QAAA,EAC5C7B,OAAO,GAAG,eAAe,GAAG;IAAU;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,eACTxC,OAAA;MAAQmC,OAAO,EAAEN,KAAM;MAACO,QAAQ,EAAE/B,OAAQ;MAAA6B,QAAA,EACvC7B,OAAO,GAAG,YAAY,GAAG;IAAK;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAACpC,EAAA,CAvDWH,YAAY;AAAAwC,EAAA,GAAZxC,YAAY;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}